# bot.py
import os
import discord
from dotenv import load_dotenv
import random

load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')

intents=discord.Intents.default()
intents.members = True
intents.message_content = True
client = discord.Client(intents=intents)


@client.event
async def on_ready():
    # guild = discord.utils.find(lambda g : g.name == GUILD, client.guilds) -> This can replace the rest of the guild for loop
    for guild in client.guilds:
        if guild.name == GUILD:
            break
    print(f'{client.user} has connected to Discord!')   # Test to see the bot's name
    print(f'{client.user} is connected to the following guild')    # Test to see name of the server
    print(f'{guild.name}(id:{guild.id})')   # Test to see the ID of the server

    for members in guild.members:
      print(f'Guild Members:\n - {members}')    # Test to see list of users who are members of the guild


# Welcoming new members
@client.event
async def on_member_join(member):
    await member.send(f'Hi {member.name}, welcome to the server!')


# Responds to messages
@client.event
async def on_message(message):
    if message.author == client.user:    # client.user is the bot
        return
    # Client(Bot) canâ€™t tell the difference between a bot user and a normal user account, your on_message() handler should protect against a potentially recursive case where the bot sends a message that it might, itself, handle.
    
    brooklyn_99_quotes = [
        'I\'m the human form of the ðŸ’¯ emoji.',
        'Bingpot!',
        (
            'Cool. Cool cool cool cool cool cool cool, '
            'no doubt no doubt no doubt no doubt.'
        ),
    ]
    if message.content == '99!':
        respone = random.choice(brooklyn_99_quotes)
        await message.channel.send(respone)

    if 'happy birthday' in message.content.lower():
        await message.channel.send("Happy Birthday! ðŸŽˆðŸŽ‰")






client.run(DISCORD_TOKEN)
