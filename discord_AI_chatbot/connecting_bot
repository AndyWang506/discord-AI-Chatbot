# Convert bot.py to use a Bot instead of a Client
# bot.py
import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import random

load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')

intents=discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    # guild = discord.utils.find(lambda g : g.name == GUILD, client.guilds) -> This can replace the rest of the guild for loop
    for guild in bot.guilds:
        if guild.name == GUILD:
            break
    print(f'{bot.user} has connected to Discord!')   # Test to see the bot's name
    print(f'{bot.user} is connected to the following guild')    # Test to see name of the server
    print(f'{guild.name}(id:{guild.id})')   # Test to see the ID of the server

    for members in guild.members:
      print(f'Guild Members:\n - {members}')    # Test to see list of users who are members of the guild


# Welcoming new members
@bot.event
async def on_member_join(member):
    await member.send(f'Hi {member.name}, welcome to the server!')


# Responds to messages
'''The function will now only be called when .Nero_C is mentioned in chat. 
This is different than the on_message() event, which was executed any time a user sent a message, regardless of the content.
You can invoke the !help command to see all the commands that your Bot handles
'''
@bot.command(name="Nero-Cute", help = "Response with a random Nero compliment")
async def reaction(ctx):
    nero_reaction = [
        '真的嗎！！:sparkling_heart: ', 
        '哼～肯定的啊',
        '羅馬！！！！！:flag_it: ',
        '嗯哼，余可謂天上天下，美麗至尊！:100: '
    ]
    respone = random.choice(nero_reaction)
    await ctx.send(respone)

@bot.command(name="hbd", help = "Response with Nero's blessing")
async def reaction2(ctx):
    nero_reaction2 = "Happy Birthday! 🎈:birthday:🎉\n每個人的生日是獨一無二的，要保持愉悅的心情呦~"
    await ctx.send(nero_reaction2)

@bot.command(name="roll-d", help = "Simulates rolling dice")
# Simulate rolling dice by using Converter to convert Parameters
async def roll(ctx, num_of_dice : int):
    dice = [
        str(random.randint(1,6))
        for i in range(1, num_of_dice+1)
    ]
    await ctx.send(', '.join(dice))



# Handling exceptions
# @bot.event
# async def on_message(message):
#     if message.author == bot.user:    # client.user is the bot
#         return
#     elif message.content == 'raise-exception':
#         raise discord.DiscordException
# @bot.event
# async def on_error(event,*args, **kwargs):
#     with open('err.log','a') as fileObj:
#         if event == 'on_message':
#             fileObj.write(f'Unhandle message: {args[0]}\n')
#         else:
#             raise

# @bot.command(name="raise-exception", help="Handling exceptions")
# async def on_error(event,*args, **kwargs):
#     with open('err.log','a') as fileObj:
#         if event == 'on_message':
#             fileObj.write(f'Unhandle message: {args[0]}\n')
#         else:
#             raise



# Checking Command Roles
@bot.command(name="create-channel", help = "Allow Admin role to create a channel")
@commands.has_role("Admin")
async def create_channel(ctx, channel_name = "general-network"):
    guild = ctx.guild
    exist_channel = discord.utils.get(guild.channels, name=channel_name)
    if not exist_channel:
        print(f'Creating a new channel: {channel_name}')
        await guild.create_text_channel(channel_name)

# This event handles an error event from the command and sends an informative error message back to the original Context of the invoked Command.
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CheckFailure):
        await ctx.send('Sorry, you do not have the correct role for this command!')


bot.run(DISCORD_TOKEN)
